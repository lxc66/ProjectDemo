<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>entity</name>
	<filePath>src/main/java/${packageName}/entity</filePath>
	<filePath2>src/main/java/com/jzsoft/module/${moduleName}/entity</filePath2>
	<fileName>${ClassName}.java</fileName>
	<content><![CDATA[
package ${packageName}.entity;
import java.io.Serializable;

<#list table.importList as i>
import ${i};
</#list>
import lombok.Data;
import lombok.ToString;
import lombok.EqualsAndHashCode;
import com.jzsoft.platform.core.entity.BaseEntity;
/**
 * ${functionName}Entity
 *
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@Data
@ToString
@EqualsAndHashCode(callSuper=true)
public class ${ClassName} extends BaseEntity implements Serializable {
	
	private static final long serialVersionUID = 1L;
	<#-- 生成字段属性 -->
	<#list table.columnList as c>
		<#if c.comments??>
	/**
	 * ${c.comments}
	 */
		</#if>
		<#-- 如果不是基类属性 -->
		<#if c.isNotBaseField>
		<#if !c.pkField>
			<#list c.constraintAnnotationList as a>
	${a}
			</#list>
		</#if>
	private ${c.simpleJavaType} ${c.simpleJavaField};
		</#if>
	</#list>

<#if table.existsConstantValue>
	<#list table.columnList as c>
		<#if c.constantValueField>
			<#list c.constantValueList as v>
	public static final String ${c.simpleJavaField?upper_case}_${v.key?upper_case} = "${v.value}";
			</#list>
	public static final Map<String, String> ${c.simpleJavaField?cap_first}Map = new LinkedHashMap<>();
		</#if>
	</#list>
	
	static {
	<#list table.columnList as c>
		<#if c.constantValueField>
			<#list c.constantValueList as v>
		${c.simpleJavaField?cap_first}Map.put(${c.simpleJavaField?upper_case}_${v.key?upper_case}, "${v.view}");
			</#list>
		</#if>
	</#list>
	}
	
	<#list table.columnList as c>
		<#if c.constantValueField>
	public Map<String, String> get${c.simpleJavaField?cap_first}Map(){
		return ${c.simpleJavaField?cap_first}Map;
	}
	
	public String get${c.simpleJavaField?cap_first}View(){
		return ${c.simpleJavaField?cap_first}Map.get(${c.simpleJavaField});
	}
		</#if>
	</#list>
</#if>
}]]>
	</content>
</template>